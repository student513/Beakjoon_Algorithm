#include <iostream>
#include <queue>
#include <vector>
#include <cstdio>
#include <cstring>
using namespace std;

int arr[101][101];
bool visited[101];
vector<int> vec[101];
queue<int> que;

int bfs(int start, int end) {
	int curr;
	que.push(start);
	visited[start] = true;
	if (start == end)visited[start] = false;
	while (!que.empty()) {
		for (int i = 0; i < que.size(); i++) {
			curr = que.front(); que.pop();
			for (int j = 0; j < vec[curr].size(); j++) {
				int next = vec[curr][j];

				if (!visited[next]) {
					que.push(next);
					if (next == end) {
						return 1;
					}
					visited[next] = true;
					
				}
			}
		}
	}
	return 0;
}
int main() {
	int num;
	cin >> num;
	for (int i = 0; i < num; i++) {
		for (int j = 0; j < num; j++) {
			cin >> arr[i][j];
		}
	}
	for (int i = 0; i < num; i++) {
		for (int j = 0; j < num; j++) {
			if (arr[i][j] == 1) vec[i].push_back(j);
		}
	}

	for (int i = 0; i < num; i++) {
		for (int j = 0; j < num; j++) {
			memset(visited, 0, sizeof(visited));
			while (!que.empty())que.pop();
			printf("%d ",bfs(i, j));
		}
		printf("\n");
	}
	return 0;
}