#include <iostream>
#include <cstring>
#include <algorithm>
#include <vector>
using namespace std;

int arr[1001];
int N, dp[1001][1001];
int s, e;
vector<int> v;
void print() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cout << dp[i][j] << " ";
		}
		cout << "\n";
	}
}

int main() {
	cin >> N;
	for (int i = 0; i < N; i++)
		cin >> arr[i];
	
	for (int i = 0; i < N; i++) {
		if (i == 0) {
			dp[i][0] = 1;
			for (int j = 1; j < N; j++) {
				if (arr[i] > arr[j]) {
					dp[i][j] = dp[i][i] + 1;
					for (int k = 0; k < j; k++) {
						if (arr[i] > arr[k] && arr[k] > arr[j] && dp[i][j] <= dp[i][k]) {
							dp[i][j] = dp[i][k] + 1;
						}
						else if (arr[j] == arr[k]) {
							dp[i][j] = dp[i][k];
						}
					}
				}
			}
		}
		else if (i == N - 1) {
			dp[i][N - 1] = 1;
			for (int j = N-2; j >= 0; j--) {
				if (arr[i] > arr[j]) {
					dp[i][j] = dp[i][i] + 1;
					for (int k = N - 1; k > j; k--) {
						if (arr[i] > arr[k] && arr[k] > arr[j] && dp[i][j] <= dp[i][k]) {
							dp[i][j] = dp[i][k] + 1;
						}
						else if (arr[j] == arr[k]) {
							dp[i][j] = dp[i][k];
						}
					}
				}
			}
		}
		else {
			dp[i][i] = 1;
			for (int j = i+1; j < N; j++) {
				if (arr[i] > arr[j]) {
					dp[i][j] = dp[i][i] + 1;
					for (int k = i; k < j; k++) {
						if (arr[i] > arr[k] && arr[k] > arr[j] && dp[i][j] <= dp[i][k]) {
							dp[i][j] = dp[i][k] + 1;
						}
						else if (arr[j] == arr[k]) {
							dp[i][j] = dp[i][k];
						}
					}
				}
			}
			for (int j = i-1; j >= 0; j--) {
				if (arr[i] > arr[j]) {
					dp[i][j] = dp[i][i] + 1;
					for (int k = i; k > j; k--) {
						if (arr[i] > arr[k] && arr[k] > arr[j] && dp[i][j] <= dp[i][k]) {
							dp[i][j] = dp[i][k] + 1;
						}
						else if (arr[j] == arr[k]) {
							dp[i][j] = dp[i][k];
						}
					}
				}
			}
			
			//for (int j = 0; j < N; j++) {cout << dp[i][j] << " ";}cout << '\n';
		}
	}
	//print();
	
	for (int i = 0; i < N; i++) {
		int max_L = 1;
		int max_R = 1;
		if (i == 0) {
			for (int j = 1; j < N; j++) {
				if (dp[i][j] > max_R)
					max_R = dp[i][j];
			}
			//cout << max_R;
			v.push_back(max_R);
		}
		else if (i == N - 1) {
			for (int j = N-2; j >= 0; j--) {
				if (dp[i][j] > max_L)
					max_L = dp[i][j];
			}
			//cout << max_L;
			v.push_back(max_L);
		}
		else {
			for (int j = i + 1; j < N; j++) {
				if (dp[i][j] > max_R)
					max_R = dp[i][j];
			}
			for (int j = i - 1; j >= 0; j--) {
				if (dp[i][j] > max_L)
					max_L = dp[i][j];
			}
			//cout << max_R + max_L;
			v.push_back(max_R + max_L-1);
		}
	}
	//for (int i = 0; i < v.size(); i++) {cout << v[i];}
	int Max = *max_element(v.begin(), v.end());

	cout << Max;
	
	return 0;
}