#include <iostream>
#include <string>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

string tmp[26];
int map[26][26];
int N;
bool visited[26][26];
int dir[4][2] = { {-1,0},{0,1},{1,0},{0,-1} };
int mark=1, ccount;
queue<pair<int, int>> que;
vector<int> result;

void print() {
	cout << '\n';
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			cout << map[i][j];
		}
		cout << '\n';
	}
	cout << '\n';
}

void bfs(int x, int y) {
	visited[x][y] = true;
	que.push(make_pair(x, y));
	map[x][y] = mark;
	ccount++;

	while (!que.empty()) { 
		for (int i = 0; i < que.size(); i++) {
			int curr_x = que.front().first; int curr_y = que.front().second;
			que.pop();
			for (int i = 0; i < 4; i++) {
				int dir_x = curr_x + dir[i][0]; int dir_y = curr_y + dir[i][1];
				if (0 <= dir_x && dir_x < N && 0 <= dir_y && dir_y < N 
					&& map[dir_x][dir_y] == 1 && !visited[dir_x][dir_y]) {
					que.push(make_pair(dir_x, dir_y));
					visited[dir_x][dir_y] = true;
					map[dir_x][dir_y] = mark;
					ccount++;
				}
			}
		}
	}
	result.push_back(ccount);
}

int main() {
	cin >> N;
	for (int i = 0; i < N; i++) {
		cin >> tmp[i];
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (tmp[i][j] == '0')
				map[i][j] = 0;
			else map[i][j] = 1;
		}
	}
	//print();
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			ccount = 0;
			if (!visited[i][j] && map[i][j]) {
				bfs(i, j);
				mark++;
				//print();
			}
		}
	}

	cout << mark-1 << '\n';
	sort(result.begin(), result.end());
	for (int i = 0; i < result.size(); i++)
		if(result[i])
			cout << result[i] << '\n';
	return 0;
}