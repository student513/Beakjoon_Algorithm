#include <iostream>
#include <queue>
using namespace std;

int box[1001][1001][2];
int M, N, day;
int dir[4][2] = { {-1,0},{0,1},{1,0},{0,-1} };
bool visited[1001][1001];
queue<pair<int, int>> que;
int temp[1001][1001];


void print() {
	cout << '\n';
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cout << box[i][j][1] << " ";
		}
		cout << '\n';
	}
	cout << '\n';
}
void copy_box() {
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			temp[i][j] = box[i][j][0];
		}
	}
}
bool can_t() {//더이상 익지 않는 경우
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (temp[i][j] != box[i][j][0])return false;
		}
	}
	return true;
}
bool chk_box() {//0이 있으면 -1출력, 다 익었으면 day 출력
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (box[i][j][0] == 0) {
				return false;
			}
		}
	}
	return true;
}
int main() {
	cin >> M >> N;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> box[i][j][0];
			if (box[i][j][0] == 1) {
				box[i][j][1] = 1;
				que.push(make_pair(i, j));
			}
		}
	}
	while (true) {
		copy_box();
		while (!que.empty()) {
			int x = que.front().first; int y = que.front().second;
			que.pop();
			//visited[x][y] = true;

			for (int i = 0; i < 4; i++) {
				int dir_x = x + dir[i][0]; int dir_y = y + dir[i][1];
				if (0 <= dir_x && dir_x < N && 0 <= dir_y && dir_y < M 
								&& box[dir_x][dir_y][1]==0 && box[dir_x][dir_y][0]==0) {
					box[dir_x][dir_y][0] = 1;
					box[dir_x][dir_y][1] = box[x][y][1] + 1;
					que.push(make_pair(dir_x, dir_y));
				}
			}
			//print();
		}
		if (can_t())break;
	}
	
	int Max = -1;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (box[i][j][1] > Max) Max = box[i][j][1];
		}
	}

	if (!chk_box()) cout << -1;
	else  cout << Max - 1;
	return 0;
}