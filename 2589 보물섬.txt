#include <iostream>
#include <queue>
#include <vector>
#include <cstring>
#include <algorithm>
using namespace std;

char map[51][51];
int M, N;
bool visited[51][51];
vector<int> result;
queue<pair<pair<int, int>, int>> que;
int dir[4][2] = { {-1,0},{0,1},{1,0},{0,-1} };
int dist[51][51];

void print() {
	cout << '\n';
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			cout << dist[i][j] << " ";
		}
		cout << '\n';
	}
	cout << '\n';
}

void max_dist() {
	int Max = -1;
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			if (dist[i][j] >= Max)Max = dist[i][j];
		}
	}
	result.push_back(Max);
	//cout << Max<<'\n';
}

void bfs(int x, int y) {
	visited[x][y] = true;
	que.push({ {x,y},0 });
	while (!que.empty()) {
		int now_x = que.front().first.first;
		int now_y = que.front().first.second;
		int now_dist = que.front().second;
		dist[now_x][now_y] = now_dist;
		que.pop();

		for (int i = 0; i < 4; i++) {
			int dis_x = now_x + dir[i][0];
			int dis_y = now_y + dir[i][1];
			if (0 <= dis_x && dis_x < M
				&& 0 <= dis_y && dis_y < N
				&& !visited[dis_x][dis_y] && map[dis_x][dis_y] == 'L') {
				visited[dis_x][dis_y] = true;
				que.push({ {dis_x,dis_y},now_dist + 1 });
			}
		}
	}
	//print();
	max_dist();
}

int main() {
	cin >> M >> N;
	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			cin >> map[i][j];
		}
	}

	for (int i = 0; i < M; i++) {
		for (int j = 0; j < N; j++) {
			memset(visited, false, sizeof(visited));
			memset(dist, false, sizeof(dist));
			if (map[i][j] == 'L') {
				bfs(i, j);
			}
		}
	}

	int ans = *max_element(result.begin(), result.end());
	cout << ans;
	return 0;
}