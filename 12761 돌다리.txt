#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
#include <queue>
using namespace std;
const int MAX = 100001;
int A, B, N, M;
int arr[100001];
bool visited[100001];
int BFS(int idx) {
	queue<pair<int, int>> que;
	que.push({ idx,0 });
	visited[idx] = true;

	while (!que.empty()) {
		int cur = que.front().first;
		int cnt = que.front().second;
		que.pop();
		if (cur == M)return cnt;
		if (cur + 1 < MAX && !visited[cur + 1]) {
			visited[cur + 1] = true;
			que.push({ cur + 1,cnt + 1 });
		}
		if (cur - 1 >= 0 && !visited[cur - 1]) {
			visited[cur - 1] = true;
			que.push({ cur - 1,cnt + 1 });
		}
		if (cur + A < MAX && !visited[cur +A]) {
			visited[cur +A] = true;
			que.push({ cur +A,cnt + 1 });
		}
		if (cur - A >= 0 && !visited[cur - A]) {
			visited[cur - A] = true;
			que.push({ cur - A,cnt + 1 });
		}
		if (cur +B <MAX && !visited[cur +B]) {
			visited[cur +B] = true;
			que.push({ cur +B,cnt + 1 });
		}
		if (cur - B >= 0 && !visited[cur - B]) {
			visited[cur - B] = true;
			que.push({ cur - B,cnt + 1 });
		}
		if (cur *A<MAX && !visited[cur *A]) {
			visited[cur *A] = true;
			que.push({ cur *A,cnt + 1 });
		}
		if (cur *B<MAX && !visited[cur*B]) {
			visited[cur*B] = true;
			que.push({ cur*B,cnt + 1 });
		}
	}
	return -1;
}

int main() {
	cin >> A >> B >> N >> M;
	cout << BFS(N) << "\n";
	return 0;
}