#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
using namespace std;

long long N,M, result=1;
vector<int> vec, gap;
int DP[41];
int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cin >> N >> M;
	vec.push_back(0);
	for (int i = 0; i < M; i++) {
		int temp;
		cin >> temp;
		vec.push_back(temp);//vip석 입력
	}
	for (int i = 0; i < vec.size()-1; i++) {
		gap.push_back(vec[i + 1] - vec[i]-1);
	}
	gap.push_back(N - vec.back());

	//for (int i = 0; i < gap.size(); i++)cout << gap[i] << " ";

	int Max = *max_element(gap.begin(), gap.end());
	DP[1] = 1; DP[2] = 2;
	for (int i = 3; i <= Max; i++) {
		DP[i] = DP[i - 1] + DP[i - 2];
	}
	for (int i = 0; i < gap.size(); i++) {
		if(DP[gap[i]])result *= DP[gap[i]];
	}
	//if(result)
		cout << result;
	//else cout << 1;
	return 0;
}